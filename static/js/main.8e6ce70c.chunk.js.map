{"version":3,"sources":["components/navbar.jsx","components/goldform.js","components/silverform.js","components/calculations.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","activeTab","handleSelect","_this","setState","window","location","href","search","this","_this2","react_default","a","createElement","className","role","onClick","Link","to","Component","GoldForm","weight","units","karats","goldPrice","total","change","e","Object","defineProperty","target","name","value","onReset","onSubmit","preventDefault","fields","convRate","content","console","log","toFixed","formatter","totalStr","toString","number","slice","length","decimal","count","i","ValidatorForm","addValidationRule","isNaN","isEnabled","lib","autoComplete","style","float","label","validators","errorMessages","onChange","InputProps","endAdornment","InputAdornment_default","position","FormControl_default","formControl","InputLabel_default","shrink","htmlFor","Select_default","input","Input_default","id","displayEmpty","MenuItem_default","startAdornment","Button_default","type","color","disabled","src","height","border","title","width","clear","TextField_default","textField","margin","readOnly","variant","SilverForm","purity","silverPrice","custom","onCustom","display","size","Calculations","fontSize","App","BrowserRouter","history","navbar","Route","exact","path","process","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e6ce70c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/**\r\n * NavBar component allows the user to navigate between the gold calculator, silver calculator, and the calculations page\r\n */\r\nclass NavBar extends Component {\r\n  state = {\r\n    activeTab: \"\"\r\n    /**\r\n     * activeTab keeps track of which page tab should be active depending on what page the user is on\r\n     * \"0\" for the home page gold calculator, \"1\" for the silver calculator, and \"2\" for the Calculations\r\n     */\r\n  };\r\n  componentDidMount() {\r\n    /**\r\n     * the URL is retrieved and the activeTab state is set based off what page the user is currently on\r\n     */\r\n\r\n    if (window.location.href.search(\"silverform\") !== -1) {\r\n      this.setState({\r\n        activeTab: \"1\"\r\n      });\r\n    } else if (window.location.href.search(\"calculations\") !== -1) {\r\n      this.setState({\r\n        activeTab: \"2\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        activeTab: \"0\"\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSelect = activeTab => {\r\n    /** when someone changes the tab the activeTab state has to be set */\r\n    this.setState({\r\n      activeTab\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul className=\"nav nav-tabs\">\r\n          <li\r\n            role=\"presentation\"\r\n            className={this.state.activeTab === \"0\" ? \"active\" : \"\"}\r\n            onClick={() => this.handleSelect(\"0\")}\r\n          >\r\n            <Link to=\"/\">Gold Calculator</Link>\r\n          </li>\r\n          <li\r\n            role=\"presentation\"\r\n            className={this.state.activeTab === \"1\" ? \"active\" : \"\"}\r\n            onClick={() => this.handleSelect(\"1\")}\r\n          >\r\n            <Link to=\"/silverform\">Silver Calculator</Link>\r\n          </li>\r\n          <li\r\n            role=\"presentation\"\r\n            className={this.state.activeTab === \"2\" ? \"active\" : \"\"}\r\n            onClick={() => this.handleSelect(\"2\")}\r\n          >\r\n            <Link to=\"/calculations\">Calculations</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\n\r\n/**\r\n *  GoldForm component is a form for the gold calculator\r\n */\r\nexport default class GoldForm extends Component {\r\n  /* State holds all of the values needed in the calculation, that are filled out using the form */\r\n  state = {\r\n    weight: \"\",\r\n    units: \"g\",\r\n    karats: \"\",\r\n    goldPrice: \"\",\r\n    total: 0\r\n  };\r\n\r\n  /* state is changed actively as user fills out the form */\r\n  change = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  /* state can be reset with a button under the form */\r\n  onReset = () => {\r\n    this.setState({\r\n      weight: \"\",\r\n      units: \"g\",\r\n      karats: \"\",\r\n      goldPrice: \"\"\r\n    });\r\n  };\r\n\r\n  /* onSubmit functions does calculations and sets the state */\r\n  onSubmit = e => {\r\n    e.preventDefault(); /* stops browser from refreshing */\r\n\r\n    const fields = this.state;\r\n    let convRate = 1;\r\n\r\n    /* unit conversion to ounces */\r\n    if (fields.units === \"g\") {\r\n      convRate = 0.035274;\r\n    } else if (fields.units === \"ozt\") {\r\n      convRate = 1.09714;\r\n    } else if (fields.units === \"dwt\") {\r\n      convRate = 0.0548571;\r\n    }\r\n\r\n    let goldPrice = fields.goldPrice;\r\n    let weight = fields.weight * convRate;\r\n    let content = fields.karats / 24;\r\n    console.log(\"Weight in oz:\", weight);\r\n    console.log(\"Gold content: \", content * 100, \"%\");\r\n\r\n    /* calculation for total price, more info is on the calculations.js page */\r\n    let total = (weight * content * goldPrice).toFixed(2);\r\n    console.log(\"Price of Gold: \", total);\r\n\r\n    this.setState({ total });\r\n  };\r\n\r\n  /* Formatter function just converts the number into a price format by adding commas and a decimal where necessary ex: 1,000.00) */\r\n  formatter = total => {\r\n    let totalStr = total.toString();\r\n    let number = totalStr.slice(0, totalStr.length - 3);\r\n    let decimal = totalStr.slice(totalStr.length - 3);\r\n\r\n    let count = 0;\r\n    for (let i = number.length - 1; i > 0; i--) {\r\n      count++;\r\n      if (count === 3) {\r\n        count = 0;\r\n        number = number.slice(0, i) + \",\" + number.slice(i);\r\n      }\r\n    }\r\n\r\n    total = number + \"\" + decimal;\r\n\r\n    return total;\r\n  };\r\n\r\n  componentDidMount() {\r\n    ValidatorForm.addValidationRule(\"isValidKarat\", value => {\r\n      if (value < 0 || value > 24) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"isANumber\", value => {\r\n      if (isNaN(value)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"isWrongPrice\", value => {\r\n      if ((value < 500 && value > 0) || value > 5000) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const isEnabled =\r\n      !isNaN(this.state.weight) &&\r\n      !isNaN(this.state.goldPrice) &&\r\n      !isNaN(this.state.karats) &&\r\n      this.state.karats > 0 &&\r\n      this.state.goldPrice > 0 &&\r\n      this.state.weight > 0 &&\r\n      this.state.karats <= 24 &&\r\n      this.state.goldPrice >= 500 &&\r\n      this.state.goldPrice <= 5000;\r\n    return (\r\n      <div>\r\n        <ValidatorForm\r\n          autoComplete=\"off\"\r\n          onSubmit={e => this.onSubmit(e)}\r\n          style={{ float: \"left\" }}\r\n        >\r\n          <TextValidator\r\n            name=\"weight\"\r\n            label=\"Weight\"\r\n            value={this.state.weight}\r\n            validators={[\"required\", \"isANumber\"]}\r\n            errorMessages={[\r\n              \"this field is required\",\r\n              \"this should be a number value\"\r\n            ]}\r\n            onChange={e => this.change(e)}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  {this.state.units}\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <FormControl className={this.state.formControl}>\r\n            <InputLabel shrink htmlFor=\"units-label-placeholder\">\r\n              Units\r\n            </InputLabel>\r\n            <Select\r\n              value={this.state.units}\r\n              onChange={e => this.change(e)}\r\n              input={<Input name=\"units\" id=\"units-label-placeholder\" />}\r\n              name=\"units\"\r\n              displayEmpty\r\n              className=\"this.state.selectEmpty\"\r\n            >\r\n              <MenuItem value=\"g\">Grams (g)</MenuItem>\r\n              <MenuItem value=\"oz\">Ounces (oz)</MenuItem>\r\n              <MenuItem value=\"ozt\">Troy ounces (oz t)</MenuItem>\r\n              <MenuItem value=\"dwt\">Pennyweight (dwt)</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <br />\r\n          <TextValidator\r\n            name=\"karats\"\r\n            label=\"Karats\"\r\n            value={this.state.karats}\r\n            validators={[\"required\", \"isANumber\", \"isValidKarat\"]}\r\n            errorMessages={[\r\n              \"this field is required\",\r\n              \"must be a number value\",\r\n              \"must be between 0-24 karats\"\r\n            ]}\r\n            onChange={e => this.change(e)}\r\n          />\r\n          <br />\r\n          <br />\r\n          <TextValidator\r\n            name=\"goldPrice\"\r\n            label=\"Current Price of Gold / oz\"\r\n            value={this.state.goldPrice}\r\n            validators={[\"required\", \"isANumber\", \"isWrongPrice\"]}\r\n            errorMessages={[\r\n              \"this field is required\",\r\n              \"must be a number value\",\r\n              \"unlikely current price of gold per oz\"\r\n            ]}\r\n            onChange={e => this.change(e)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">$</InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            onClick={e => this.onSubmit(e)}\r\n            disabled={!isEnabled}\r\n          >\r\n            =\r\n          </Button>\r\n          <br />\r\n          <Button color=\"secondary\" onClick={() => this.onReset()}>\r\n            Reset\r\n          </Button>\r\n        </ValidatorForm>\r\n\r\n        <iframe\r\n          src=\"https://www.goldbroker.com/widget/live-price/XAU?currency=USD\"\r\n          height={130}\r\n          style={{ border: 0 }}\r\n          title=\"gold widget\"\r\n          width={130}\r\n        />\r\n        <br />\r\n\r\n        <div style={{ clear: \"left\" }}>\r\n          <TextField\r\n            id=\"filled-read-only-input\"\r\n            label=\"Total Gold Value:\"\r\n            value={\"$\" + this.formatter((this.state.total * 1).toFixed(2))}\r\n            className={this.state.textField}\r\n            margin=\"normal\"\r\n            InputProps={{\r\n              readOnly: true\r\n            }}\r\n            variant=\"filled\"\r\n          />\r\n\r\n          <TextField\r\n            id=\"filled-read-only-input\"\r\n            label=\"Total Gold Value (92%):\"\r\n            value={\"$\" + this.formatter((this.state.total * 0.92).toFixed(2))}\r\n            className={this.state.textField}\r\n            margin=\"normal\"\r\n            InputProps={{\r\n              readOnly: true\r\n            }}\r\n            variant=\"filled\"\r\n          />\r\n\r\n          <TextField\r\n            id=\"filled-read-only-input\"\r\n            label=\"Total Gold Value (62%):\"\r\n            value={\"$\" + this.formatter((this.state.total * 0.62).toFixed(2))}\r\n            className={this.state.textField}\r\n            margin=\"normal\"\r\n            InputProps={{\r\n              readOnly: true\r\n            }}\r\n            variant=\"filled\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\n\r\nexport default class SilverForm extends Component {\r\n  state = {\r\n    weight: \"\",\r\n    units: \"g\",\r\n    purity: \"92.5\",\r\n    silverPrice: \"\",\r\n    total: 0,\r\n    custom: false\r\n  };\r\n\r\n  change = e => {\r\n    console.log(\"change\", e.target.name, e.target.value);\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  onReset = () => {\r\n    this.setState({\r\n      weight: \"\",\r\n      units: \"g\",\r\n      purity: this.state.custom ? \"\" : \".925\",\r\n      silverPrice: \"\"\r\n    });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const fields = this.state;\r\n    let convRate = 0.999;\r\n\r\n    if (fields.units === \"g\") {\r\n      convRate = 0.035274;\r\n    } else if (fields.units === \"ozt\") {\r\n      convRate = 1.09714;\r\n    } else if (fields.units === \"dwt\") {\r\n      convRate = 0.0548571;\r\n    }\r\n\r\n    let silverPrice = fields.silverPrice;\r\n    let weight = fields.weight * convRate;\r\n    let content = fields.purity;\r\n    console.log(\"Weight in oz:\", weight);\r\n    console.log(\"Silver content: \", content, \"%\");\r\n\r\n    let total = (weight * (content / 100) * silverPrice).toFixed(2);\r\n    console.log(\"Price of Silver: \", total);\r\n\r\n    this.setState({ total });\r\n  };\r\n\r\n  onCustom = () => {\r\n    if (this.state.custom) {\r\n      this.setState({\r\n        purity: \"92.5\",\r\n        custom: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        purity: \"\",\r\n        custom: true\r\n      });\r\n    }\r\n  };\r\n\r\n  formatter = total => {\r\n    let totalStr = total.toString();\r\n    let number = totalStr.slice(0, totalStr.length - 3);\r\n    let decimal = totalStr.slice(totalStr.length - 3);\r\n\r\n    let count = 0;\r\n    for (let i = number.length - 1; i > 0; i--) {\r\n      count++;\r\n      if (count === 3) {\r\n        count = 0;\r\n        number = number.slice(0, i) + \",\" + number.slice(i);\r\n      }\r\n    }\r\n\r\n    total = number + \"\" + decimal;\r\n\r\n    return total;\r\n  };\r\n\r\n  componentDidMount() {\r\n    ValidatorForm.addValidationRule(\"isANumber\", value => {\r\n      if (isNaN(value)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"isWrongPrice\", value => {\r\n      if (value > 100) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n    ValidatorForm.addValidationRule(\"isValidPercent\", value => {\r\n      if (value > 100 || (value < 1 && value !== 0)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const isEnabled =\r\n      !isNaN(this.state.weight) &&\r\n      !isNaN(this.state.silverPrice) &&\r\n      this.state.silverPrice > 0 &&\r\n      this.state.weight > 0 &&\r\n      this.state.silverPrice <= 100 &&\r\n      this.state.purity >= 1 &&\r\n      this.state.purity <= 100;\r\n\r\n    return (\r\n      <div>\r\n        <ValidatorForm\r\n          autoComplete=\"off\"\r\n          onSubmit={e => this.onSubmit(e)}\r\n          style={{ float: \"left\" }}\r\n        >\r\n          <TextValidator\r\n            name=\"weight\"\r\n            label=\"Weight\"\r\n            value={this.state.weight}\r\n            validators={[\"required\", \"isANumber\"]}\r\n            errorMessages={[\"this field is required\", \"must be a number value\"]}\r\n            onChange={e => this.change(e)}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  {this.state.units}\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <FormControl className={this.state.formControl}>\r\n            <InputLabel shrink htmlFor=\"units-label-placeholder\">\r\n              Units\r\n            </InputLabel>\r\n            <Select\r\n              value={this.state.units}\r\n              onChange={e => this.change(e)}\r\n              input={<Input name=\"units\" id=\"units-label-placeholder\" />}\r\n              name=\"units\"\r\n              displayEmpty\r\n              className=\"this.state.selectEmpty\"\r\n            >\r\n              <MenuItem value=\"g\">Grams (g)</MenuItem>\r\n              <MenuItem value=\"oz\">Ounces (oz)</MenuItem>\r\n              <MenuItem value=\"ozt\">Troy ounces (oz t)</MenuItem>\r\n              <MenuItem value=\"dwt\">Pennyweight (dwt)</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <br />\r\n\r\n          <br />\r\n\r\n          <FormControl\r\n            className={this.state.formControl}\r\n            style={{ display: this.state.custom ? \"none\" : \"\" }}\r\n          >\r\n            <InputLabel shrink htmlFor=\"purity-label-placeholder\">\r\n              Purity\r\n            </InputLabel>\r\n            <Select\r\n              value={this.state.purity}\r\n              onChange={e => this.change(e)}\r\n              input={<Input name=\"purity\" id=\"purity-label-placeholder\" />}\r\n              name=\"purity\"\r\n              displayEmpty\r\n              className=\"this.state.selectEmpty\"\r\n            >\r\n              <MenuItem value=\"99.9\">Pure/Fine Silver (99.9%)</MenuItem>\r\n              <MenuItem value=\"95.8\">British Silver (95.8%)</MenuItem>\r\n              <MenuItem value=\"92.5\">Sterling Silver (92.5%)</MenuItem>\r\n              <MenuItem value=\"90\">Coin Silver (90%)</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <br style={{ display: this.state.custom ? \"none\" : \"\" }} />\r\n          <TextValidator\r\n            name=\"purity\"\r\n            label=\"Purity\"\r\n            value={this.state.purity}\r\n            validators={[\"required\", \"isANumber\", \"isValidPercent\"]}\r\n            errorMessages={[\r\n              \"this field is required\",\r\n              \"must be a number value\",\r\n              \"this should be a percent value\"\r\n            ]}\r\n            onChange={e => this.change(e)}\r\n            style={{\r\n              display: this.state.custom ? \"\" : \"none\"\r\n            }}\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\r\n            }}\r\n          />\r\n\r\n          <br />\r\n          <br style={{ display: this.state.custom ? \"\" : \"none\" }} />\r\n\r\n          <Button\r\n            size=\"small\"\r\n            className={this.state.margin}\r\n            onClick={() => this.onCustom()}\r\n          >\r\n            {this.state.custom ? \"Select preset purity\" : \"Add custom purity\"}\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <TextValidator\r\n            name=\"silverPrice\"\r\n            label=\"Current Price of Silver / oz\"\r\n            value={this.state.silverPrice}\r\n            validators={[\"required\", \"isANumber\", \"isWrongPrice\"]}\r\n            errorMessages={[\r\n              \"this field is required\",\r\n              \"must be a number value\",\r\n              \"unlikely current price of silver per oz\"\r\n            ]}\r\n            onChange={e => this.change(e)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">$</InputAdornment>\r\n              )\r\n            }}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            onClick={e => this.onSubmit(e)}\r\n            disabled={!isEnabled}\r\n          >\r\n            =\r\n          </Button>\r\n          <br />\r\n          <Button color=\"secondary\" onClick={() => this.onReset()}>\r\n            Reset\r\n          </Button>\r\n        </ValidatorForm>\r\n\r\n        <iframe\r\n          src=\"https://www.goldbroker.com/widget/live-price/XAG?currency=USD\"\r\n          height={130}\r\n          style={{ border: 0 }}\r\n          title=\"silver widget\"\r\n          width={130}\r\n        />\r\n\r\n        <br />\r\n\r\n        <div style={{ clear: \"left\" }}>\r\n          <TextField\r\n            id=\"filled-read-only-input\"\r\n            label=\"Total Silver Value:\"\r\n            value={\"$\" + this.formatter((this.state.total * 1).toFixed(2))}\r\n            className={this.state.textField}\r\n            margin=\"normal\"\r\n            InputProps={{\r\n              readOnly: true\r\n            }}\r\n            variant=\"filled\"\r\n          />\r\n\r\n          <TextField\r\n            id=\"filled-read-only-input\"\r\n            label=\"Total Silver Value (92%):\"\r\n            value={\"$\" + this.formatter((this.state.total * 0.92).toFixed(2))}\r\n            className={this.state.textField}\r\n            margin=\"normal\"\r\n            InputProps={{\r\n              readOnly: true\r\n            }}\r\n            variant=\"filled\"\r\n          />\r\n\r\n          <TextField\r\n            id=\"filled-read-only-input\"\r\n            label=\"Total Silver Value (62%):\"\r\n            value={\"$\" + this.formatter((this.state.total * 0.62).toFixed(2))}\r\n            className={this.state.textField}\r\n            margin=\"normal\"\r\n            InputProps={{\r\n              readOnly: true\r\n            }}\r\n            variant=\"filled\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n/**\r\n * Calculations is simply a page of information on all of the calculations done on the other pages\r\n */\r\n\r\nconst Calculations = () => {\r\n  return (\r\n    <div style={{ margin: \"10px\" }}>\r\n      <h5>Gold:</h5>\r\n\r\n      <ul style={{ fontSize: \"10px\" }}>\r\n        <li>\r\n          Weight is converted to ounces. <br />\r\n          Conversion Rates: <br />\r\n          (weight * 0.035274) grams -> ounces <br />\r\n          (weight * 1.09714) troy ounces -> ounces <br />\r\n          (weight * 0.0548571) pennyweight -> ounces\r\n        </li>\r\n        <li>\r\n          Amount of Karats is divided by 24 (24 Karats is 99.9% purity), to\r\n          convert the purity to a decimal out of 1\r\n        </li>\r\n        <li>\r\n          Converted weight in ounces * purity * spot price of gold = price of\r\n          the piece of gold\r\n        </li>\r\n        <li>\r\n          Ex: 25 troy ounces of 15 karat gold... <br />\r\n          25 ozt * (1.09714 conversion rate to oz) = 27.4285 oz <br />\r\n          15 karats / 24 karats = 0.625 purity <br />\r\n          27.4285 oz * 0.625 purity * $1232.32/oz (current spot price of gold) =\r\n          $21,125.43\r\n        </li>\r\n      </ul>\r\n      <h5> Silver:</h5>\r\n      <ul style={{ fontSize: \"10px\" }}>\r\n        <li>\r\n          Weight is converted to ounces. <br />\r\n          Conversion Rates: <br />\r\n          (weight * 0.035274) grams -> ounces <br />\r\n          (weight * 1.09714) troy ounces -> ounces <br />\r\n          (weight * 0.0548571) pennyweight -> ounces\r\n        </li>\r\n        <li>\r\n          The input for purity percentage is divided by 100 to get a decimal out\r\n          of 1\r\n        </li>\r\n        <li>\r\n          Converted weight in ounces * purity * spot price of silver = price of\r\n          the piece of silver\r\n        </li>\r\n        <li>\r\n          Ex: 120 grams of sterling silver.. <br />\r\n          120 g * (0.035274 conversion rate to oz) = 4.23288 oz <br />\r\n          92.5% purity (sterling silver's purity percentage)/ 100 = 0.925 purity{\" \"}\r\n          <br />\r\n          4.23288 oz * 0.925 purity * $14.43/oz (current spot price of silver) =\r\n          $56.499... ~ (rounds to $56.50)\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculations;\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport GoldForm from \"./components/goldform\";\r\nimport SilverForm from \"./components/silverform\";\r\nimport Calculations from \"./components/calculations\";\r\nimport { BrowserRouter, Route, hashHistory } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter history=\"hashHistory\">\r\n        <div>\r\n          <NavBar />\r\n          <Route\r\n            exact\r\n            path={process.env.PUBLIC_URL + \"/\"}\r\n            component={GoldForm}\r\n          />\r\n          <Route\r\n            path={process.env.PUBLIC_URL + \"/silverform\"}\r\n            component={SilverForm}\r\n          />\r\n          <Route\r\n            path={process.env.PUBLIC_URL + \"/calculations\"}\r\n            component={Calculations}\r\n          />\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/css/bootstrap-theme.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}